{
	"name": "02-configDB",
	"properties": {
		"content": {
			"query": ".create table ['StageIoTRawData'] (['deviceId']:string, ['enqueuedTime']:datetime, ['messageProperties']:dynamic, ['messageSource']:string, ['telemetry']:dynamic, ['templateId']:string, ['schema']:string)\n\n.alter table StageIoTRawData policy ingestionbatching @'{\"MaximumBatchingTimeSpan\":\"00:00:30\"}'\n\n.create table ['StageIoTRawData'] ingestion json mapping 'StageIoTRawData_mapping' '[{\"column\":\"deviceId\", \"Properties\":{\"Path\":\"$[\\'deviceId\\']\"}},{\"column\":\"enqueuedTime\", \"Properties\":{\"Path\":\"$[\\'enqueuedTime\\']\"}},{\"column\":\"messageProperties\", \"Properties\":{\"Path\":\"$[\\'messageProperties\\']\"}},{\"column\":\"messageSource\", \"Properties\":{\"Path\":\"$[\\'messageSource\\']\"}},{\"column\":\"telemetry\", \"Properties\":{\"Path\":\"$[\\'telemetry\\']\"}},{\"column\":\"templateId\", \"Properties\":{\"Path\":\"$[\\'templateId\\']\"}},{\"column\":\"schema\", \"Properties\":{\"Path\":\"$[\\'schema\\']\"}}]'\n\n.create table Thermostats (EnqueuedTimeUTC: datetime, DeviceId: string, BatteryLevel: long, Temp: real, Humidity: real) \n\n.create table ['Thermostats'] ingestion csv mapping 'Thermostats_mapping' '[{\"column\":\"EnqueuedTimeUTC\", \"Properties\":{\"Ordinal\":\"0\"}},{\"column\":\"DeviceId\", \"Properties\":{\"Ordinal\":\"1\"}},{\"column\":\"BatteryLevel\", \"Properties\":{\"Ordinal\":\"2\"}},{\"column\":\"Temp\", \"Properties\":{\"Ordinal\":\"3\"}},{\"column\":\"Humidity\", \"Properties\":{\"Ordinal\":\"4\"}}]'\n\n.create-or-alter function with (docstring = \"Used for Thermostats Update Policy\",folder = \"Functions\") ExtractThermostatData {\n\tStageIoTRawData\n\t| where telemetry has 'temp'\n\t| project \n\tEnqueuedTimeUTC=enqueuedTime,\n\tDeviceId=deviceId,\n\tBatteryLevel = tolong(telemetry.['BatteryLevel']), \n\tTemp =  toreal(telemetry.['temp']),\n\tHumidity =  toreal(telemetry.['humidity'])\n}\n\n.create-or-alter function with (folder = \"Analytics/IoT\", skipvalidation = \"true\") GetDevicesbyStore(Office:string) {\n\tlet ADTendpoint = \"https://<dtURI>\";\n\tlet ADTquery = strcat(\"SELECT T.$dtId as Office, F.$dtId as Floor, D.$dtId as DeviceId FROM DIGITALTWINS T JOIN F RELATED T.officecontainsfloors JOIN D RELATED F.floorcontainsdevices where T.$dtId='\", Office, \"'\"); \n\tevaluate azure_digital_twins_query_request(ADTendpoint, ADTquery)\n    | project Office=tostring(Office), Floor=tostring(Floor), DeviceId=tostring(DeviceId)\n} \n\n// .create-or-alter function with (folder = \"Analytics/IoT\", skipvalidation = \"true\") GetDevicesbyStoreFloor(Office:string, Floor:string) {\n// \tlet ADTendpoint = \"https://<dtURI>\";\n// \tlet ADTquery = strcat(\"SELECT T.$dtId as Office, F.$dtId as Floor, D.$dtId as DeviceId FROM DIGITALTWINS T JOIN F RELATED T.officecontainsfloors JOIN D RELATED F.floorcontainsdevices where T.$dtId='\", Office, \"' AND F.$dtId = '\", Floor, \"'\"); \n// \tevaluate azure_digital_twins_query_request(ADTendpoint, ADTquery)\n//     | project Office=tostring(Office), Floor=tostring(Floor), DeviceId=tostring(DeviceId)\n// }\n\n.alter table Thermostats policy update \n@'[{ \"IsEnabled\": true, \"Source\": \"StageIoTRawData\", \"Query\": \"ExtractThermostatData()\", \"IsTransactional\": false, \"PropagateIngestionProperties\": false}]'\n\n",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "codesmall1",
				"databaseName": "db1"
			}
		},
		"type": "KqlQuery"
	}
}