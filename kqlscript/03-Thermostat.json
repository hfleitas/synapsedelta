{
	"name": "03-Thermostat",
	"properties": {
		"content": {
			"query": "//setup data ingestion via portal\n\nStageIoTRawData | count \n\nStageIoTRawData | sample 10\n\n\nStageIoTRawData\n| project enqueuedTime, deviceId,\nBatteryLevel = tolong(telemetry.['BatteryLevel']), \nTemp =  toreal(telemetry.['temp']),\nHumidity =  toreal(telemetry.['humidity'])\n\n\n.create-or-alter function  ExtractThermostatData {\n//same here...\n}\n\n\nThermostats | sample 10\n\n//count of rows in table\nThermostats | count \n\n\n//What is the average temp every 1 min?\nThermostats\n| where EnqueuedTimeUTC > ago(7d)\n| where DeviceId == 'dd5f1451-9e9a-43a6-ad02-32bed6877f20'\n| summarize avg(Temp) by bin(EnqueuedTimeUTC,1m)\n| render timechart \n\n\n//Is there any missing data? \n//make-series\n//Create series of specified aggregated values along specified axis.\nThermostats\n| where EnqueuedTimeUTC > ago(6h)\n| where DeviceId == 'dd5f1451-9e9a-43a6-ad02-32bed6877f20'\n| make-series AvgTemp=avg(Temp) on EnqueuedTimeUTC from ago(6h) to now() step 1m   \n| render timechart \n\n\n//How can I fill the missing values?\n//series_fill_linear()\n//Performs linear interpolation of missing values in a series.\nThermostats\n| where EnqueuedTimeUTC > ago(6h)\n| where DeviceId == 'dd5f1451-9e9a-43a6-ad02-32bed6877f20'\n| make-series AvgTemp=avg(Temp) default=real(null) on EnqueuedTimeUTC from ago(6h) to now() step 1m   \n| extend NoGapsTemp=series_fill_linear(AvgTemp)\n| project EnqueuedTimeUTC, NoGapsTemp\n| render timechart \n\n\n\n//What will be the temprature for next one hour?\nThermostats\n| where EnqueuedTimeUTC > ago(2d)\n| where DeviceId == 'dd5f1451-9e9a-43a6-ad02-32bed6877f20'\n| make-series AvgTemp=avg(Temp) default=real(null) on EnqueuedTimeUTC from ago(2d) to now()+15m step 1m   \n| extend NoGapsTemp=series_fill_linear(AvgTemp)\n| project EnqueuedTimeUTC, NoGapsTemp\n| extend forecast = series_decompose_forecast(NoGapsTemp, 15)\n| render timechart with(title='Forecasting the next 15min by Time Series Decmposition')\n\n\n//Are there any anomalies for this device?\nThermostats\n| where EnqueuedTimeUTC > ago(3d)\n| where DeviceId == 'dd5f1451-9e9a-43a6-ad02-32bed6877f20'\n| make-series AvgTemp=avg(Temp) default=real(null) on EnqueuedTimeUTC from ago(3d) to now() step 1m   \n| extend NoGapsTemp=series_fill_linear(AvgTemp)\n| project EnqueuedTimeUTC, NoGapsTemp\n| extend anomalies = series_decompose_anomalies(NoGapsTemp,1) \n| render anomalychart with(anomalycolumns=anomalies)\n\n\n//What the anomalies I should focus on across all devices?\nThermostats\n| where EnqueuedTimeUTC > ago(3d)\n| make-series AvgTemp=avg(Temp) default=real(null) on EnqueuedTimeUTC from ago(3d) to now() step 1m by DeviceId\n| extend NoGapsTemp=series_fill_linear(AvgTemp)\n| project EnqueuedTimeUTC, DeviceId, NoGapsTemp\n| extend anomalies = series_decompose_anomalies(NoGapsTemp, 1)\n| mv-expand EnqueuedTimeUTC, anomalies, NoGapsTemp\n| where anomalies == 1\n\n//10 devices\nThermostats\n| summarize count(DeviceId) by DeviceId\n| count\n\n//Hilo & Axceta\n//30days of all devices in \nThermostats\n| where ingestion_time() > ago(30d)\n| project EnqueuedTimeUTC, ingestion_time(), latency=(ingestion_time()-EnqueuedTimeUTC) //get latency\n| summarize latency=percentile(latency, 95) by timewindow=bin(ingestion_time(), 15m) //get percentile by buckets\n| summarize timewindow=make_list(timewindow), latency=make_list(latency), anomaly=series_decompose_anomalies(make_list(latency)) //get anomalies\n| project timewindow, latency, anomaly //keep needed columns for chart\n| render anomalychart with(anomalycolumns = anomaly)\n\n.show materialized-views\n\n.create-or-alter materialized-view Hourly_Average_Mview on table Thermostats {\nThermostats | summarize avg_Battery_Level=avg(BatteryLevel),avg_Temp=avg(Temp), avg_Humidity=avg(Humidity) by DeviceId, bin(EnqueuedTimeUTC,1h)\n}\n\n.create-or-alter materialized-view Current_Mview on table Thermostats {\nThermostats | summarize (curr_Event_Time,curr_Battery_Level,curr_Temp, curr_Humidity)=arg_max(EnqueuedTimeUTC,BatteryLevel,Temp,Humidity) by DeviceId\n}\n\n//Materialized views\nHourly_Average_Mview\n| where EnqueuedTimeUTC > ago(1h)\n| take 1000 \n\nCurrent_Mview\n\n\n.show external tables\n\n\n\nexternal_table(\"ext_Thermostats\")\n| where EnqueuedTimeUTC between (datetime('03-01-2020 11:00 am') .. datetime('03-01-2020 01:00 pm')) and DeviceId == '637086754472373714'\n| project EnqueuedTimeUTC, BatteryLevel, Temp, Humidity",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "codesmall1",
				"databaseName": "db1"
			}
		},
		"type": "KqlQuery"
	}
}