{
	"name": "DeltaChanges2",
	"properties": {
		"folder": {
			"name": "Delta"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "threedot0",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "Synapse Spark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e4e06275-58d1-4081-8f1b-be12462eb701/resourceGroups/wplushiramsynapse/providers/Microsoft.Synapse/workspaces/wplushiramsynapse/bigDataPools/threedot0",
				"name": "threedot0",
				"type": "Spark",
				"endpoint": "https://wplushiramsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/threedot0",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"case class Data(key: String, value: String)\r\n",
					"\r\n",
					"case class ChangeData(key: String, newValue: String, deleted: Boolean, time: Long) {\r\n",
					"  assert(newValue != null ^ deleted)\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"val target = Seq(\r\n",
					"  Data(\"a\", \"0\"),\r\n",
					"  Data(\"b\", \"1\"),\r\n",
					"  Data(\"c\", \"2\"),\r\n",
					"  Data(\"d\", \"3\")\r\n",
					").toDF()"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"sql(\"drop table if exists target\")\r\n",
					"target.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"target\")"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"import com.microsoft.spark.sqlanalytics.utils.Constants\r\n",
					"import org.apache.spark.sql.SqlAnalyticsConnector._\r\n",
					"\r\n",
					"val targetDF = spark.sqlContext.sql(\"select * from target\")"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"val changeDataSource = Seq(\n",
					"  ChangeData(\"a\", \"10\", deleted = false, time = 0),\n",
					"  ChangeData(\"a\", null, deleted = true, time = 1),   // a was updated and then deleted\n",
					"  ChangeData(\"b\", null, deleted = true, time = 2),   // b was just deleted once\n",
					"  ChangeData(\"c\", null, deleted = true, time = 3),   // c was deleted and then updated twice\n",
					"  ChangeData(\"c\", \"20\", deleted = false, time = 4),\n",
					"  ChangeData(\"c\", \"200\", deleted = false, time = 5)\n",
					").toDF().createOrReplaceTempView(\"changes\")\n",
					"\n",
					"// val changeDataSource = Seq(\n",
					"//   ChangeData(\"a\", \"10\", deleted = false, time = 0),\n",
					"//   ChangeData(\"a\", null, deleted = true, time = 1),   // a was updated and then deleted\n",
					"//   ChangeData(\"b\", null, deleted = true, time = 2),   // b was just deleted once\n",
					"//   ChangeData(\"c\", null, deleted = true, time = 3),   // c was deleted and then updated twice\n",
					"//   ChangeData(\"c\", \"20\", deleted = false, time = 4),\n",
					"//   ChangeData(\"d\", \"82\", deleted = false, time = 5)\n",
					"//   ChangeData(\"e\", \"19\", deleted = false, time = 6)\n",
					"//   ChangeData(\"f\", \"12\", deleted = false, time = 7)\n",
					"//   ChangeData(\"g\", null, deleted = false, time = 8)\n",
					"//   ChangeData(\"d\", \"21\", deleted = false, time = 9)\n",
					"// ).toDF().createOrReplaceTempView(\"changes\")"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"MERGE INTO target t\r\n",
					"USING (\r\n",
					"  -- Find the latest change for each key based on the timestamp\r\n",
					"  SELECT key, latest.newValue as newValue, latest.deleted as deleted FROM (    \r\n",
					"    -- Note: For nested structs, max on struct is computed as \r\n",
					"    -- max on first struct field, if equal fall back to second fields, and so on.\r\n",
					"    SELECT key, max(struct(time, newValue, deleted)) as latest FROM changes GROUP BY key\r\n",
					"  )\r\n",
					") s\r\n",
					"ON s.key = t.key\r\n",
					"WHEN MATCHED AND s.deleted = true THEN DELETE\r\n",
					"WHEN MATCHED THEN UPDATE SET key = s.key, value = s.newValue\r\n",
					"WHEN NOT MATCHED AND s.deleted = false THEN INSERT (key, value) VALUES (key, newValue)"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"val changesDF = spark.sql(\"select * from changes\")"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"val latestChangeForEachKey = changesDF.selectExpr(\"key\", \"struct(time, newValue, deleted) as otherCols\").groupBy(\"key\").agg(max(\"otherCols\").as(\"latest\")).selectExpr(\"key\", \"latest.*\")"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"latestChangeForEachKey.createOrReplaceTempView(\"lastchanges\")"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"latestChangeForEachKey.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"lastchanges\") "
				],
				"attachments": null,
				"execution_count": 15
			}
		]
	}
}