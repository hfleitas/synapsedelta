{
	"name": "RTANasaISSNow",
	"properties": {
		"folder": {
			"name": "FabricRTA"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pool2",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6a1e603e-8aff-4c07-aece-725416e5c383"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e4e06275-58d1-4081-8f1b-be12462eb701/resourceGroups/wplushiramsynapse/providers/Microsoft.Synapse/workspaces/wplushiramsynapse/bigDataPools/pool2",
				"name": "pool2",
				"type": "Spark",
				"endpoint": "https://wplushiramsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pool2",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"![ISS_emblem](https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/ISS_emblem.png/250px-ISS_emblem.png)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install azure-eventhub>=5.11.0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"http://open-notify.org/Open-Notify-API/ISS-Location-Now/"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"from azure.eventhub import EventHubProducerClient, EventData"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Poll Rate\r\n",
					"Please note that there is an inherent uncertainty in the ISS position models that is usually larger than one second. In addition the position is only calculated once per second (the maximum resolution of an integer unix time stamp). So polling more than 1 Hz would be useless except to add unnessisary strain to the servers.\r\n",
					"\r\n",
					"A single client should try and keep polling to about once every 5 seconds."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"eventstream='Endpoint=sb://eventstream-4523749a-0547-4220-b20c-08ff6f4cbd25.servicebus.windows.net/;SharedAccessKeyName=key_ec76641f-c2f3-92b9-1eab-b4b3644ee13d;SharedAccessKey=ZpK0jTfxdaAHQqGAhBmyoCn6CWR0BmhpT+AEhMpJMo8=;EntityPath=es_4523749a-0547-4220-b20c-08ff6f4cbd25'\r\n",
					"producer = EventHubProducerClient.from_connection_string(conn_str=eventstream)\r\n",
					"\r\n",
					"i=0\r\n",
					"\r\n",
					"for i in range(0, 436554):\r\n",
					"    s = requests.get(\"http://api.open-notify.org/iss-now.json\")\r\n",
					"    b = producer.create_batch() \r\n",
					"    j = df.content\r\n",
					"    # print(j)\r\n",
					"    b.add(EventData(j))\r\n",
					"    producer.send_batch(b) # send it!\r\n",
					"    time.sleep(1)\r\n",
					"    producer.close()\r\n",
					"    i=i+1    "
				],
				"execution_count": null
			}
		]
	}
}